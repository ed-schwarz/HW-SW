//main.c

#include 		"fft.h"
#include        <stdio.h>
#include        <math.h>

#define FFT_Type	2

#define M       3

//number of points
#define N       (1<<M)

fixed real[N], imag[N], real_fix[N], imag_fix[N], real_mul[N], imag_mul[N];
//for Backwward propagation
static fixed bwd_real_mul[N], bwd_imag_mul[N], bwd_real_fix[N], bwd_imag_fix[N];
static cplx f[N], bwd_f[N];
bool equal;

static cplx fwd_coeffs[N/2];
static cplx bwd_coeffs[N/2];


int Test_fft_ref(){//Test for reference FFT and IFFT

		fix_fft(real_fix, imag_fix, M, 0);
	    memcpy(bwd_real_fix, real_fix, sizeof(real_fix));
	    memcpy(bwd_imag_fix, imag_fix, sizeof(imag_fix));
	    fix_fft(bwd_real_fix, bwd_imag_fix, M, 1);

	}

int Test_fft_adv_dit(){

    fft_adv_dit(f, M, fwd_coeffs);
    memcpy(bwd_f, f, sizeof(f));
    fft_adv_dit_inv(bwd_f, M, bwd_coeffs);
}

int Test_only_fft_adv_dit(){
	fix_fft(real_fix, imag_fix, M, 0);
    fft_adv_dit(f, M, fwd_coeffs);
}

int Test_only_fft_adv_dit_inv(){
	fix_fft(real_fix, imag_fix, M, 1);
    fft_adv_dit_inv(f, M, bwd_coeffs);
}

int Test_fft_adv_dif(){
    fft_adv_dif(f, M, fwd_coeffs);
    memcpy(bwd_f, f, sizeof(f));
    fft_adv_dif_inv(bwd_f, M, bwd_coeffs);
}
int Test_only_fft_adv_dif(){
	fft_adv_dif(f, M, fwd_coeffs);
	fix_fft(real_fix, imag_fix, M, 0);
}
int Test_only_fft_adv_dif_inv(){
	fft_adv_dif_inv(f, M, fwd_coeffs);
	fix_fft(real_fix, imag_fix, M, 1);
}

int main() {
	int i;
	//precalculation of Coefficients
    GenerateCoefficients(fwd_coeffs, N/2, false);
    GenerateCoefficients(bwd_coeffs, N/2, true);
    //Generating the input data
	for (i = 0; i < N; i++) {
		real[i] = 1000 * cos(i * 2 * 3.1415926535 / N);
		imag[i] = 0;
		real_fix[i] = real[i];
		imag_fix[i] = imag[i];
		real_mul[i] = real[i];
		imag_mul[i] = imag[i];

		f[i].R = real[i];
		f[i].I = imag[i];
	}

/*
	printf("\nInput Data\n");
	for (i = 0; i < N; i++) {
		printf("%d: %d, %d\n", i, real[i], imag[i]);
	}
	printf("\nInput Data Complex\n");
		for (i = 0; i < N; i++) {
			printf("%d: %d, %d\n", i, f[i].R, f[i].I);
		}
	*/

#if (FFT_Type==0)//Test reference C code

	fix_fft(real, imag, M, 0);

	printf("\nFFT pure C\n");
	for (i = 0; i < N; i++) {
		printf("%d: %d, %d\n", i, real[i], imag[i]);
	}

#elif (FFT_Type==1)//Test FFT2 and reference

	fix_fft(real_fix, imag_fix, M, 0);

	printf("\nFFT pure C\n");
	for (i = 0; i < N; i++) {
		printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
	}

	fft_FFT2(real_mul, imag_mul, M, 0);

	printf("\nFFT TIE Node\n");
	for (i = 0; i < N; i++) {
		printf("%d: %d, %d\n", i, real_mul[i], imag_mul[i]);
	}

#elif (FFT_Type==2)//Test DIT FFT and IFFT
	Test_fft_ref();
	Test_fft_adv_dit();

	equal = true;
	for (i = 0; i < N; i++) { //Compare the calculated values and generate print
			if(f[i].R != real_fix[i] || f[i].I != imag_fix[i])
			{
				equal = false;
				printf("\nCorrect C value\n");
				printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
				printf("Wrong TIE value\n");
				printf("%d: %d, %d\n", i, f[i].R, f[i].I);
			}
			if(bwd_f[i].R != bwd_real_fix[i] || bwd_f[i].I != bwd_imag_fix[i])
			{
				equal = false;
				printf("\nCorrect C value\n");
				printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
				printf("Wrong TIE value\n");
				printf("%d: %d, %d\n", i, bwd_f[i].R, bwd_f[i].I);
			}
		}
	if(equal){
		printf("FFT Pass");
	}
	else {
		printf("FFT Fail");
	}


#elif(FFT_Type == 3)//Test DIT FFT
	Test_only_fft_adv_dit();

	equal = true;
		for (i = 0; i < N; i++) {
				if(f[i].R != real_fix[i] || f[i].I != imag_fix[i])
				{
					equal = false;
					printf("\nCorrect C value\n");
					printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
					printf("Wrong TIE value\n");
					printf("%d: %d, %d\n", i, f[i].R, f[i].I);
				}
		}
				if(equal){
					printf("FFT Pass");
				}
				else {
					printf("FFT Fail");
				}

#elif(FFT_Type == 4)////Test DIT IFFT
	Test_only_fft_adv_dit_inv();
	equal = true;
			for (i = 0; i < N; i++) {
					if(bwd_f[i].R != real_fix[i] || bwd_f[i].I != imag_fix[i])
					{
						equal = false;
						printf("\nCorrect C value\n");
						printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
						printf("Wrong TIE value\n");
						printf("%d: %d, %d\n", i, bwd_f[i].R, bwd_f[i].I);
					}
					if(equal){
						printf("FFT Pass");
					}
					else {
						printf("FFT Fail");
					}

#elif(FFT_Type == 5) //Test DIF FFT and IFFT
	Test_fft_adv_dif();
	Test_fft_ref();

	equal = true;
	for (i = 0; i < N; i++) {
			if(f[i].R != real_fix[i] || f[i].I != imag_fix[i])
			{
				equal = false;
				printf("\nCorrect C value\n");
				printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
				printf("Wrong TIE value\n");
				printf("%d: %d, %d\n", i, f[i].R, f[i].I);
			}
			if(bwd_f[i].R != bwd_real_fix[i] || bwd_f[i].I != bwd_imag_fix[i])
			{
				equal = false;
				printf("\nCorrect C value\n");
				printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
				printf("Wrong TIE value\n");
				printf("%d: %d, %d\n", i, bwd_f[i].R, bwd_f[i].I);
			}
		}
	if(equal){
		printf("FFT Pass");
	}
	else {
		printf("FFT Fail");
	}


#elif(FFT_Type == 6) //Test DIF FFT
	Test_only_fft_adv_dif();
	equal = true;
		for (i = 0; i < N; i++) {
				if(f[i].R != real_fix[i] || f[i].I != imag_fix[i])
				{
					equal = false;
					printf("\nCorrect C value\n");
					printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
					printf("Wrong TIE value\n");
					printf("%d: %d, %d\n", i, f[i].R, f[i].I);
				}
		}
				if(equal){
					printf("FFT Pass");
				}
				else {
					printf("FFT Fail");
				}
#elif (FFT_Type == 7)//Test DIF IFFT
	Test_only_fft_adv_dif_inv();
	equal = true;
		for (i = 0; i < N; i++) {
				if(bwd_f[i].R != real_fix[i] || bwd_f[i].I != imag_fix[i])
				{
					equal = false;
					printf("\nCorrect C value\n");
					printf("%d: %d, %d\n", i, real_fix[i], imag_fix[i]);
					printf("Wrong TIE value\n");
					printf("%d: %d, %d\n", i, bwd_f[i].R, bwd_f[i].I);
				}
		}
				if(equal){
					printf("FFT Pass");
				}
				else {
					printf("FFT Fail");
				}

#elif (FFT_Type==8)//Test FFT2 and reference

				FFT_COM_MUL(32768, 32768);

#endif

				return 0;
			}
