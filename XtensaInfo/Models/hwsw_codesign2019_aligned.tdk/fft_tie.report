### TIE Report File


### FLIX instruction information
# These are the slots in each format:
format <fft_flix> slots:
    fft_slot0 = fft_flix[5:4] (index = 0)
    fft_slot1 = fft_flix[7:6] (index = 1)

# These are the instructions in each slot
slot <Inst> instructions: nop=NOP
    FFT_2_FFT FFT_2_f_LD FFT_8_FFT_DIF FFT_8_FFT_DIT FFT_BIT_REVERSE 
    FFT_COM_MUL FFT_INIT FFT_LOAD_W FFT_UPDATE RUR.a_i RUR.a_r RUR.av_0 
    RUR.av_1 RUR.av_2 RUR.av_3 RUR.b_i RUR.b_r RUR.bv_0 RUR.bv_1 RUR.bv_2 
    RUR.bv_3 RUR.debug_reg RUR.done RUR.even_const RUR.even_ix RUR.l 
    RUR.lg2_n RUR.m_ix RUR.n RUR.n_2 RUR.odd_ix RUR.ptr_data RUR.ptr_w 
    RUR.q_i RUR.q_r RUR.qv_i_0 RUR.qv_i_1 RUR.qv_r_0 RUR.qv_r_1 RUR.shift 
    RUR.step RUR.time_decimation RUR.u_i RUR.u_r RUR.v_i RUR.v_r RUR.w_i 
    RUR.w_inc RUR.w_ix RUR.w_r RUR.wv_0 RUR.wv_1 RUR.wv_2 RUR.wv_3 WUR.a_i 
    WUR.a_r WUR.av_0 WUR.av_1 WUR.av_2 WUR.av_3 WUR.b_i WUR.b_r WUR.bv_0 
    WUR.bv_1 WUR.bv_2 WUR.bv_3 WUR.debug_reg WUR.done WUR.even_const 
    WUR.even_ix WUR.l WUR.lg2_n WUR.m_ix WUR.n WUR.n_2 WUR.odd_ix 
    WUR.ptr_data WUR.ptr_w WUR.q_i WUR.q_r WUR.qv_i_0 WUR.qv_i_1 WUR.qv_r_0 
    WUR.qv_r_1 WUR.shift WUR.step WUR.time_decimation WUR.u_i WUR.u_r 
    WUR.v_i WUR.v_r WUR.w_i WUR.w_inc WUR.w_ix WUR.w_r WUR.wv_0 WUR.wv_1 
    WUR.wv_2 WUR.wv_3 
slot <fft_slot0> instructions: nop=NOP
    FFT_LOAD_EVEN FFT_STORE_EVEN NOP 
slot <fft_slot1> instructions: nop=NOP
    FFT_LOAD_ODD FFT_STORE_ODD NOP 


### Register File port information
# These are the read and write ports for each regfile. 
regfile AR:
    
        port rd0: width( 32) stage( 1) operands( {ars,0} {opnd_FFT_COM_MUL_b_i,0}) 
        port rd1: width( 32) stage( 1 2 3) operands( {art,0} {opnd_FFT_BIT_REVERSE_n,0} {opnd_FFT_COM_MUL_b_r,0}) 
        port rd2: width( 32) stage( 1) operands( {art,1}) 
        port rd3: width( 32) stage( 1) operands( {ars,1}) 
        port rd4: width( 32) stage( 1) operands( {opnd_FFT_COM_MUL_a_r,0} {art,2}) 
        port rd5: width( 32) stage( 1) operands( {opnd_FFT_COM_MUL_a_i,0} {ars,2}) 
        port wr0: width( 32) stage( 1 2) operands( {ar0,0} {ar12,0} {ar4,0} {ar8,0} {arr,0} {ars,0} {ars_entry,0} {art,0} {opnd_FFT_BIT_REVERSE_n,0} {opnd_FFT_COM_MUL_a_r,0} {opnd_FFT_UPDATE_done_out,0}) 
        port wr1: width( 32) stage( 1) operands( {arr,1} {art,1}) 
        port wr2: width( 32) stage( 1) operands( {opnd_FFT_COM_MUL_a_i,0} {arr,2} {ars,2} {art,2}) 
regfile BR:
    
        port rd0: width( 1 4 8 16) stage( 1) operands( {brall,0} {bs4,0} {bs8,0} {bt,0}) 
        port rd1: width( 1) stage( 1) operands( {bs,0}) 
        port wr0: width( 1 16) stage( 1) operands( {br,0} {brall,0} {bt,0}) 


### Register file port and state information by stage
# These are the read and write ports for each regfile and states.
regfile AR:
    Port rd0 Operand ars Slot 0 Stage 1: CALLX12 CALLX8 CALLX4 ENTRY MOVSP RETW RETW.N L32E S32E ADD.N ADDI.N BEQZ.N BNEZ.N L32I.N MOV.N RET.N S32I.N ADDI ADDMI ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR BEQI BNEI BGEI BLTI BBCI BBSI BGEUI BLTUI BEQ BNE BGE BLT BGEU BLTU BANY BNONE BALL BNALL BBC BBS BEQZ BNEZ BGEZ BLTZ CALLX0 JX L16UI L16SI L32I L8UI LOOP LOOPNEZ LOOPGTZ MOVEQZ MOVNEZ MOVLTZ MOVGEZ RET S16I S32I S32NB S8I SSR SSL SSA8L SSA8B SLL SRC SLLI MUL16U MUL16S MULL LDDR32.P SDDR32.P MOVF MOVT IPF IHI III LICT LICW SICT SICW IDTLB PDTLB RDTLB0 RDTLB1 WDTLB IITLB PITLB RITLB0 RITLB1 WITLB CLAMPS MIN MAX MINU MAXU NSA NSAU SEXT RER WER
    Port rd0 Operand opnd_FFT_COM_MUL_b_i Slot 0 Stage 1: FFT_COM_MUL
    Port rd1 Operand art Slot 0 Stage 1: WSR.WINDOWBASE XSR.WINDOWBASE WSR.WINDOWSTART XSR.WINDOWSTART ADD.N ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR BEQ BNE BGE BLT BGEU BLTU BANY BNONE BALL BNALL BBC BBS EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG ABS SRC SRL SRA SRAI SRLI WSR.LEND XSR.LEND WSR.LBEG XSR.LBEG WSR.SAR XSR.SAR WSR.MEMCTL XSR.MEMCTL WSR.LITBASE XSR.LITBASE WSR.PS XSR.PS MUL16U MUL16S MULL WSR.BR XSR.BR MIN MAX MINU MAXU WER WUR.u_r WUR.u_i WUR.v_r WUR.v_i WUR.q_r WUR.q_i WUR.av_0 WUR.av_1 WUR.av_2 WUR.av_3 WUR.bv_0 WUR.bv_1 WUR.bv_2 WUR.bv_3 WUR.done WUR.shift WUR.even_ix WUR.odd_ix WUR.even_const WUR.w_ix WUR.w_inc WUR.m_ix WUR.l WUR.n_2 WUR.step WUR.debug_reg
    Port rd1 Operand art Slot 0 Stage 2: S32E S32I.N S16I S32I S32NB S8I WSR.CONFIGID0 WSR.INTENABLE XSR.INTENABLE WSR.ICOUNTLEVEL XSR.ICOUNTLEVEL SICT SICW WUR.wv_0 WUR.wv_1 WUR.wv_2 WUR.wv_3
    Port rd1 Operand art Slot 0 Stage 3: WSR.LCOUNT XSR.LCOUNT WSR.EPC1 XSR.EPC1 WSR.EXCSAVE1 XSR.EXCSAVE1 WSR.EPC2 XSR.EPC2 WSR.EXCSAVE2 XSR.EXCSAVE2 WSR.EPS2 XSR.EPS2 WSR.EXCVADDR XSR.EXCVADDR WSR.DEPC XSR.DEPC WSR.EXCCAUSE XSR.EXCCAUSE WSR.INTSET WSR.INTCLEAR WSR.DEBUGCAUSE XSR.DEBUGCAUSE WSR.ICOUNT XSR.ICOUNT WSR.DDR XSR.DDR WDTLB WITLB WSR.CPENABLE XSR.CPENABLE WUR.w_r WUR.w_i WUR.a_r WUR.a_i WUR.b_r WUR.b_i WUR.n WUR.lg2_n WUR.ptr_data WUR.ptr_w WUR.time_decimation WUR.qv_r_0 WUR.qv_r_1 WUR.qv_i_0 WUR.qv_i_1
    Port rd1 Operand opnd_FFT_BIT_REVERSE_n Slot 0 Stage 1: FFT_BIT_REVERSE
    Port rd1 Operand opnd_FFT_COM_MUL_b_r Slot 0 Stage 1: FFT_COM_MUL
    Port rd2 Operand art Slot 1 Stage 1: ADD SUB ADDX2 ADDX4 ADDX8 AND OR XOR EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG SRC SRL SRA SRAI SRLI BEQ.W18 BNE.W18 BGE.W18 BLT.W18 BGEU.W18 BLTU.W18 BANY.W18 BNONE.W18 BALL.W18 BNALL.W18 BBC.W18 BBS.W18
    Port rd3 Operand ars Slot 1 Stage 1: MOV.N ADDI ADDMI ADD SUB ADDX2 ADDX4 ADDX8 AND OR XOR JX MOVEQZ MOVNEZ MOVLTZ MOVGEZ SSL SLL SRC SLLI SEXT BEQZ.W18 BNEZ.W18 BGEZ.W18 BLTZ.W18 BEQI.W18 BNEI.W18 BGEI.W18 BLTI.W18 BGEUI.W18 BLTUI.W18 BBCI.W18 BBSI.W18 BEQ.W18 BNE.W18 BGE.W18 BLT.W18 BGEU.W18 BLTU.W18 BANY.W18 BNONE.W18 BALL.W18 BNALL.W18 BBC.W18 BBS.W18
    Port rd4 Operand opnd_FFT_COM_MUL_a_r Slot 0 Stage 1: FFT_COM_MUL
    Port rd4 Operand art Slot 2 Stage 1: ADD SUB ADDX2 ADDX4 AND OR XOR NEG ABS SRL SRA SRAI SRLI
    Port rd5 Operand opnd_FFT_COM_MUL_a_i Slot 0 Stage 1: FFT_COM_MUL
    Port rd5 Operand ars Slot 2 Stage 1: ADDI.N MOV.N ADD SUB ADDX2 ADDX4 AND OR XOR SEXT
    Port wr0 Operand ar0 Slot 0 Stage 1: CALL0 CALLX0
    Port wr0 Operand ar12 Slot 0 Stage 1: CALL12 CALLX12
    Port wr0 Operand ar4 Slot 0 Stage 1: CALL4 CALLX4
    Port wr0 Operand ar8 Slot 0 Stage 1: CALL8 CALLX8
    Port wr0 Operand arr Slot 0 Stage 1: ADD.N ADDI.N ADD SUB ADDX2 ADDX4 ADDX8 SUBX2 SUBX4 SUBX8 AND OR XOR EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG ABS SLL SRC SRL SRA SLLI SRAI SRLI MUL16U MUL16S MULL MOVF MOVT CLAMPS MIN MAX MINU MAXU SEXT RUR.w_r RUR.w_i RUR.a_r RUR.a_i RUR.b_r RUR.b_i RUR.u_r RUR.u_i RUR.v_r RUR.v_i RUR.q_r RUR.q_i RUR.wv_0 RUR.wv_1 RUR.wv_2 RUR.wv_3 RUR.av_0 RUR.av_1 RUR.av_2 RUR.av_3 RUR.bv_0 RUR.bv_1 RUR.bv_2 RUR.bv_3 RUR.done RUR.shift RUR.even_ix RUR.odd_ix RUR.even_const RUR.w_ix RUR.w_inc RUR.m_ix RUR.l RUR.n RUR.n_2 RUR.lg2_n RUR.step RUR.ptr_data RUR.ptr_w RUR.debug_reg RUR.time_decimation RUR.qv_r_0 RUR.qv_r_1 RUR.qv_i_0 RUR.qv_i_1
    Port wr0 Operand ars Slot 0 Stage 1: MOVI.N LDDR32.P SDDR32.P
    Port wr0 Operand ars_entry Slot 0 Stage 1: ENTRY
    Port wr0 Operand art Slot 0 Stage 1: MOVSP RSR.WINDOWBASE XSR.WINDOWBASE RSR.WINDOWSTART XSR.WINDOWSTART MOV.N ADDI ADDMI MOVI RSIL RSR.LEND XSR.LEND RSR.LBEG XSR.LBEG RSR.SAR XSR.SAR RSR.MEMCTL XSR.MEMCTL RSR.LITBASE XSR.LITBASE RSR.BR XSR.BR NSA NSAU RER
    Port wr0 Operand art Slot 0 Stage 2: L32E L32I.N L16UI L16SI L32I L32R L8UI RSR.LCOUNT XSR.LCOUNT RSR.CONFIGID0 RSR.CONFIGID1 RSR.PS XSR.PS RSR.EPC1 XSR.EPC1 RSR.EXCSAVE1 XSR.EXCSAVE1 RSR.EPC2 XSR.EPC2 RSR.EXCSAVE2 XSR.EXCSAVE2 RSR.EPS2 XSR.EPS2 RSR.EXCVADDR XSR.EXCVADDR RSR.DEPC XSR.DEPC RSR.EXCCAUSE XSR.EXCCAUSE RSR.INTERRUPT RSR.INTENABLE XSR.INTENABLE RSR.DEBUGCAUSE XSR.DEBUGCAUSE RSR.ICOUNT XSR.ICOUNT RSR.ICOUNTLEVEL XSR.ICOUNTLEVEL RSR.DDR XSR.DDR LICT LICW PDTLB RDTLB0 RDTLB1 PITLB RITLB0 RITLB1 RSR.CPENABLE XSR.CPENABLE
    Port wr0 Operand opnd_FFT_BIT_REVERSE_n Slot 0 Stage 1: FFT_BIT_REVERSE
    Port wr0 Operand opnd_FFT_COM_MUL_a_r Slot 0 Stage 1: FFT_COM_MUL
    Port wr0 Operand opnd_FFT_UPDATE_done_out Slot 0 Stage 1: FFT_UPDATE
    Port wr1 Operand arr Slot 1 Stage 1: ADD SUB ADDX2 ADDX4 ADDX8 AND OR XOR EXTUI MOVEQZ MOVNEZ MOVLTZ MOVGEZ NEG SLL SRC SRL SRA SLLI SRAI SRLI SEXT
    Port wr1 Operand art Slot 1 Stage 1: MOV.N ADDI ADDMI MOVI
    Port wr2 Operand opnd_FFT_COM_MUL_a_i Slot 0 Stage 1: FFT_COM_MUL
    Port wr2 Operand arr Slot 2 Stage 1: ADDI.N ADD SUB ADDX2 ADDX4 AND OR XOR NEG ABS SRL SRA SRAI SRLI SEXT
    Port wr2 Operand ars Slot 2 Stage 1: MOVI.N
    Port wr2 Operand art Slot 2 Stage 1: MOV.N
regfile BR:
    Port rd0 Operand brall Slot 0 Stage 1: RSR.BR XSR.BR
    Port rd0 Operand bs4 Slot 0 Stage 1: ANY4 ALL4
    Port rd0 Operand bs8 Slot 0 Stage 1: ANY8 ALL8
    Port rd0 Operand bt Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB MOVF MOVT
    Port rd1 Operand bs Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB BF BT
    Port wr0 Operand br Slot 0 Stage 1: ANDB ANDBC ORB ORBC XORB
    Port wr0 Operand brall Slot 0 Stage 1: WSR.BR XSR.BR
    Port wr0 Operand bt Slot 0 Stage 1: ANY4 ALL4 ANY8 ALL8
states:
    State XTSYNC (use) Slot 0 Stage 1: RSYNC
    State XTSYNC (use) Slot 0 Stage 2: ESYNC
    State XTSYNC (use) Slot 0 Stage 3: DSYNC
    State XTSYNC (def) Slot 0 Stage 3: WSR.LCOUNT
    State XTSYNC (def) Slot 0 Stage 5: IDTLB
    State EPC1 (use) Slot 0 Stage 1: RFE
    State EPC1 (use) Slot 0 Stage 2: RSR.EPC1
    State EPC1 (def) Slot 0 Stage 3: WSR.EPC1
    State EPC2 (use) Slot 0 Stage 2: RSR.EPC2
    State EPC2 (use) Slot 0 Stage 1: RFI
    State EPC2 (def) Slot 0 Stage 3: WSR.EPC2
    State EXCSAVE1 (use) Slot 0 Stage 2: RSR.EXCSAVE1
    State EXCSAVE1 (def) Slot 0 Stage 3: WSR.EXCSAVE1
    State EXCSAVE2 (use) Slot 0 Stage 2: RSR.EXCSAVE2
    State EXCSAVE2 (def) Slot 0 Stage 3: WSR.EXCSAVE2
    State EPS2 (use) Slot 0 Stage 2: RSR.EPS2
    State EPS2 (use) Slot 0 Stage 1: RFI
    State EPS2 (def) Slot 0 Stage 3: WSR.EPS2
    State EXCCAUSE (use) Slot 0 Stage 2: RSR.EXCCAUSE
    State EXCCAUSE (def) Slot 0 Stage 3: WSR.EXCCAUSE
    State PSINTLEVEL (use) Slot 0 Stage 2: RSR.PS
    State PSINTLEVEL (use) Slot 0 Stage 1: RSIL
    State PSINTLEVEL (def) Slot 0 Stage 2: RSIL
    State PSUM (use) Slot 0 Stage 1: RSIL
    State PSUM (use) Slot 0 Stage 2: RSR.PS
    State PSUM (def) Slot 0 Stage 2: RFI
    State PSUM (def) Slot 0 Stage 3: WSR.PS
    State PSWOE (use) Slot 0 Stage 1: ENTRY
    State PSWOE (use) Slot 0 Stage 0: ENTRY
    State PSWOE (use) Slot 0 Stage 2: RSR.PS
    State PSWOE (def) Slot 0 Stage 1: RFI
    State PSWOE (def) Slot 0 Stage 3: WSR.PS
    State PSEXCM (use) Slot 0 Stage 1: ENTRY
    State PSEXCM (use) Slot 0 Stage 0: ENTRY
    State PSEXCM (use) Slot 0 Stage 2: RSR.PS
    State PSEXCM (def) Slot 0 Stage 1: RFE
    State DEPC (use) Slot 0 Stage 1: RFDE
    State DEPC (use) Slot 0 Stage 2: RSR.DEPC
    State DEPC (def) Slot 0 Stage 3: WSR.DEPC
    State EXCVADDR (use) Slot 0 Stage 2: RSR.EXCVADDR
    State EXCVADDR (def) Slot 0 Stage 3: WSR.EXCVADDR
    State WindowBase (use) Slot 0 Stage 0: ENTRY
    State WindowBase (use) Slot 0 Stage 1: MOVSP
    State WindowBase (def) Slot 0 Stage 0: ENTRY
    State WindowBase (def) Slot 0 Stage 1: RETW
    State WindowStart (use) Slot 0 Stage 0: ENTRY
    State WindowStart (use) Slot 0 Stage 1: MOVSP
    State WindowStart (def) Slot 0 Stage 0: ENTRY
    State WindowStart (def) Slot 0 Stage 1: RETW
    State PSCALLINC (use) Slot 0 Stage 1: RSIL
    State PSCALLINC (use) Slot 0 Stage 0: ENTRY
    State PSCALLINC (use) Slot 0 Stage 2: RSR.PS
    State PSCALLINC (def) Slot 0 Stage 1: CALL12
    State PSOWB (use) Slot 0 Stage 1: RFWO
    State PSOWB (use) Slot 0 Stage 2: RSR.PS
    State PSOWB (def) Slot 0 Stage 2: RFI
    State PSOWB (def) Slot 0 Stage 3: WSR.PS
    State LBEG (use) Slot 0 Stage 1: RSR.LBEG
    State LBEG (def) Slot 0 Stage 1: LOOP
    State LEND (use) Slot 0 Stage 1: RSR.LEND
    State LEND (def) Slot 0 Stage 1: LOOP
    State SAR (use) Slot 0 Stage 1: SLL
    State SAR (use) Slot 1 Stage 1: SLL
    State SAR (use) Slot 2 Stage 1: SRL
    State SAR (def) Slot 0 Stage 1: SSR
    State SAR (def) Slot 1 Stage 1: SSL
    State InOCDMode (use) Slot 0 Stage 1: LDDR32.P
    State InOCDMode (def) Slot 0 Stage 3: RFI
    State InOCDMode (def) Slot 0 Stage 1: RFDD
    State INTENABLE (use) Slot 0 Stage 2: RSR.INTENABLE
    State INTENABLE (def) Slot 0 Stage 2: WSR.INTENABLE
    State ICOUNTLEVEL (use) Slot 0 Stage 2: RSR.ICOUNTLEVEL
    State ICOUNTLEVEL (def) Slot 0 Stage 2: WSR.ICOUNTLEVEL
    State DEBUGCAUSE (use) Slot 0 Stage 2: RSR.DEBUGCAUSE
    State DEBUGCAUSE (def) Slot 0 Stage 3: WSR.DEBUGCAUSE
    State DBNUM (use) Slot 0 Stage 2: RSR.DEBUGCAUSE
    State DBNUM (def) Slot 0 Stage 3: WSR.DEBUGCAUSE
    State CPENABLE (use) Slot 0 Stage 2: RSR.CPENABLE
    State CPENABLE (def) Slot 0 Stage 3: WSR.CPENABLE
    State w_r (use) Slot 0 Stage 1: RUR.w_r
    State w_r (def) Slot 0 Stage 3: WUR.w_r
    State w_i (use) Slot 0 Stage 1: RUR.w_i
    State w_i (def) Slot 0 Stage 3: WUR.w_i
    State a_r (use) Slot 0 Stage 1: RUR.a_r
    State a_r (def) Slot 0 Stage 3: WUR.a_r
    State a_i (use) Slot 0 Stage 1: RUR.a_i
    State a_i (def) Slot 0 Stage 3: WUR.a_i
    State b_r (use) Slot 0 Stage 1: RUR.b_r
    State b_r (def) Slot 0 Stage 3: WUR.b_r
    State b_i (use) Slot 0 Stage 1: RUR.b_i
    State b_i (def) Slot 0 Stage 3: WUR.b_i
    State u_r (use) Slot 0 Stage 1: RUR.u_r
    State u_r (def) Slot 0 Stage 1: WUR.u_r
    State u_i (use) Slot 0 Stage 1: RUR.u_i
    State u_i (def) Slot 0 Stage 1: WUR.u_i
    State v_r (use) Slot 0 Stage 1: RUR.v_r
    State v_r (def) Slot 0 Stage 1: WUR.v_r
    State v_i (use) Slot 0 Stage 1: RUR.v_i
    State v_i (def) Slot 0 Stage 1: WUR.v_i
    State q_r (use) Slot 0 Stage 1: RUR.q_r
    State q_r (def) Slot 0 Stage 1: WUR.q_r
    State q_i (use) Slot 0 Stage 1: RUR.q_i
    State q_i (def) Slot 0 Stage 1: WUR.q_i
    State wv (use) Slot 0 Stage 1: RUR.wv_0
    State wv (use) Slot 0 Stage 2: WUR.wv_0
    State wv (def) Slot 0 Stage 2: WUR.wv_0
    State av (use) Slot 0 Stage 1: RUR.av_0
    State av (use) Slot 1 Stage 1: FFT_LOAD_ODD
    State av (def) Slot 0 Stage 1: WUR.av_0
    State av (def) Slot 1 Stage 1: FFT_STORE_ODD
    State av (def) Slot 1 Stage 2: FFT_LOAD_ODD
    State bv (use) Slot 0 Stage 1: RUR.bv_0
    State bv (def) Slot 0 Stage 1: WUR.bv_0
    State bv (def) Slot 0 Stage 2: FFT_LOAD_EVEN
    State done (use) Slot 0 Stage 1: RUR.done
    State done (use) Slot 1 Stage 1: FFT_LOAD_ODD
    State done (use) Slot 0 Stage 2: FFT_STORE_EVEN
    State done (use) Slot 1 Stage 2: FFT_STORE_ODD
    State done (def) Slot 0 Stage 1: WUR.done
    State shift (use) Slot 0 Stage 1: RUR.shift
    State shift (def) Slot 0 Stage 1: WUR.shift
    State even_ix (use) Slot 0 Stage 1: RUR.even_ix
    State even_ix (use) Slot 1 Stage 1: FFT_STORE_ODD
    State even_ix (def) Slot 0 Stage 1: WUR.even_ix
    State even_ix (def) Slot 1 Stage 1: FFT_STORE_ODD
    State odd_ix (use) Slot 0 Stage 1: RUR.odd_ix
    State odd_ix (use) Slot 1 Stage 1: FFT_LOAD_ODD
    State odd_ix (def) Slot 0 Stage 1: WUR.odd_ix
    State odd_ix (def) Slot 1 Stage 1: FFT_STORE_ODD
    State even_const (use) Slot 0 Stage 1: RUR.even_const
    State even_const (def) Slot 0 Stage 1: WUR.even_const
    State w_ix (use) Slot 0 Stage 1: RUR.w_ix
    State w_ix (def) Slot 0 Stage 1: WUR.w_ix
    State w_inc (use) Slot 0 Stage 1: RUR.w_inc
    State w_inc (def) Slot 0 Stage 1: WUR.w_inc
    State m_ix (use) Slot 0 Stage 1: RUR.m_ix
    State m_ix (use) Slot 1 Stage 1: FFT_STORE_ODD
    State m_ix (def) Slot 0 Stage 1: WUR.m_ix
    State m_ix (def) Slot 1 Stage 1: FFT_STORE_ODD
    State l (use) Slot 0 Stage 1: RUR.l
    State l (def) Slot 0 Stage 1: WUR.l
    State n (use) Slot 0 Stage 1: RUR.n
    State n (def) Slot 0 Stage 3: WUR.n
    State n_2 (use) Slot 0 Stage 1: RUR.n_2
    State n_2 (def) Slot 0 Stage 1: WUR.n_2
    State lg2_n (use) Slot 0 Stage 1: RUR.lg2_n
    State lg2_n (def) Slot 0 Stage 3: WUR.lg2_n
    State step (use) Slot 0 Stage 1: RUR.step
    State step (use) Slot 1 Stage 1: FFT_STORE_ODD
    State step (def) Slot 0 Stage 1: WUR.step
    State ptr_data (use) Slot 0 Stage 1: RUR.ptr_data
    State ptr_data (use) Slot 1 Stage 1: FFT_LOAD_ODD
    State ptr_data (def) Slot 0 Stage 3: WUR.ptr_data
    State ptr_w (use) Slot 0 Stage 1: RUR.ptr_w
    State ptr_w (def) Slot 0 Stage 3: WUR.ptr_w
    State debug_reg (use) Slot 0 Stage 1: RUR.debug_reg
    State debug_reg (def) Slot 0 Stage 1: WUR.debug_reg
    State debug_reg (def) Slot 1 Stage 1: FFT_LOAD_ODD
    State time_decimation (use) Slot 0 Stage 1: RUR.time_decimation
    State time_decimation (def) Slot 0 Stage 3: WUR.time_decimation
    State qv_r (use) Slot 0 Stage 1: RUR.qv_r_0
    State qv_r (use) Slot 0 Stage 3: WUR.qv_r_0
    State qv_r (def) Slot 0 Stage 3: WUR.qv_r_0
    State qv_i (use) Slot 0 Stage 1: RUR.qv_i_0
    State qv_i (use) Slot 0 Stage 3: WUR.qv_i_0
    State qv_i (def) Slot 0 Stage 3: WUR.qv_i_0


### Register File port instruction information
# These are the read and write ports for each regfile. 
regfile AR:
  regfile AR: port rd0: slot #0 Inst
    ADD<ars> ADDI<ars> ADDMI<ars> ADDX2<ars> ADDX4<ars> ADDX8<ars> AND<ars> 
    BALL<ars> BANY<ars> BBC<ars> BBCI<ars> BBS<ars> BBSI<ars> BEQ<ars> 
    BEQI<ars> BEQZ<ars> BGE<ars> BGEI<ars> BGEU<ars> BGEUI<ars> BGEZ<ars> 
    BLT<ars> BLTI<ars> BLTU<ars> BLTUI<ars> BLTZ<ars> BNALL<ars> BNE<ars> 
    BNEI<ars> BNEZ<ars> BNONE<ars> CALLX0<ars> CALLX12<ars> CALLX4<ars> 
    CALLX8<ars> CLAMPS<ars> ENTRY<ars> FFT_COM_MUL<opnd_FFT_COM_MUL_b_i> 
    IDTLB<ars> IHI<ars> III<ars> IITLB<ars> IPF<ars> JX<ars> L16SI<ars> 
    L16UI<ars> L32E<ars> L32I<ars> L8UI<ars> LDDR32.P<ars> LICT<ars> 
    LICW<ars> LOOP<ars> LOOPGTZ<ars> LOOPNEZ<ars> MAX<ars> MAXU<ars> 
    MIN<ars> MINU<ars> MOVEQZ<ars> MOVF<ars> MOVGEZ<ars> MOVLTZ<ars> 
    MOVNEZ<ars> MOVSP<ars> MOVT<ars> MUL16S<ars> MUL16U<ars> MULL<ars> 
    NSA<ars> NSAU<ars> OR<ars> PDTLB<ars> PITLB<ars> RDTLB0<ars> 
    RDTLB1<ars> RER<ars> RET<ars> RETW<ars> RITLB0<ars> RITLB1<ars> 
    S16I<ars> S32E<ars> S32I<ars> S32NB<ars> S8I<ars> SDDR32.P<ars> 
    SEXT<ars> SICT<ars> SICW<ars> SLL<ars> SLLI<ars> SRC<ars> SSA8B<ars> 
    SSA8L<ars> SSL<ars> SSR<ars> SUB<ars> SUBX2<ars> SUBX4<ars> SUBX8<ars> 
    WDTLB<ars> WER<ars> WITLB<ars> XOR<ars> 
  regfile AR: port rd0: slot #0 Inst16a
    ADD.N<ars> ADDI.N<ars> L32I.N<ars> S32I.N<ars> 
  regfile AR: port rd0: slot #0 Inst16b
    BEQZ.N<ars> BNEZ.N<ars> MOV.N<ars> RET.N<ars> RETW.N<ars> 
  regfile AR: port rd0: slot #0 xt_flix64_slot0
    ADD<ars> ADDI<ars> ADDMI<ars> ADDX2<ars> ADDX4<ars> ADDX8<ars> AND<ars> 
    CLAMPS<ars> L16SI<ars> L16UI<ars> L32I<ars> L8UI<ars> MAX<ars> 
    MAXU<ars> MIN<ars> MINU<ars> MOV.N<ars> MOVEQZ<ars> MOVGEZ<ars> 
    MOVLTZ<ars> MOVNEZ<ars> NSA<ars> NSAU<ars> OR<ars> S16I<ars> S32I<ars> 
    S8I<ars> SEXT<ars> SLL<ars> SLLI<ars> SRC<ars> SSA8B<ars> SSA8L<ars> 
    SSL<ars> SSR<ars> SUB<ars> SUBX2<ars> SUBX4<ars> SUBX8<ars> XOR<ars> 
  regfile AR: port rd0: slot #0 xt_flix64_slot0
    ADD<ars> ADDI<ars> ADDMI<ars> ADDX2<ars> ADDX4<ars> ADDX8<ars> AND<ars> 
    CLAMPS<ars> L16SI<ars> L16UI<ars> L32I<ars> L8UI<ars> MAX<ars> 
    MAXU<ars> MIN<ars> MINU<ars> MOV.N<ars> MOVEQZ<ars> MOVGEZ<ars> 
    MOVLTZ<ars> MOVNEZ<ars> NSA<ars> NSAU<ars> OR<ars> S16I<ars> S32I<ars> 
    S8I<ars> SEXT<ars> SLL<ars> SLLI<ars> SRC<ars> SSA8B<ars> SSA8L<ars> 
    SSL<ars> SSR<ars> SUB<ars> SUBX2<ars> SUBX4<ars> SUBX8<ars> XOR<ars> 
  regfile AR: port rd1: slot #0 Inst
    ABS<art> ADD<art> ADDX2<art> ADDX4<art> ADDX8<art> AND<art> BALL<art> 
    BANY<art> BBC<art> BBS<art> BEQ<art> BGE<art> BGEU<art> BLT<art> 
    BLTU<art> BNALL<art> BNE<art> BNONE<art> EXTUI<art> 
    FFT_BIT_REVERSE<opnd_FFT_BIT_REVERSE_n> 
    FFT_COM_MUL<opnd_FFT_COM_MUL_b_r> MAX<art> MAXU<art> MIN<art> MINU<art> 
    MOVEQZ<art> MOVGEZ<art> MOVLTZ<art> MOVNEZ<art> MUL16S<art> MUL16U<art> 
    MULL<art> NEG<art> OR<art> S16I<art> S32E<art> S32I<art> S32NB<art> 
    S8I<art> SICT<art> SICW<art> SRA<art> SRAI<art> SRC<art> SRL<art> 
    SRLI<art> SUB<art> SUBX2<art> SUBX4<art> SUBX8<art> WDTLB<art> WER<art> 
    WITLB<art> WSR.BR<art> WSR.CONFIGID0<art> WSR.CPENABLE<art> 
    WSR.DDR<art> WSR.DEBUGCAUSE<art> WSR.DEPC<art> WSR.EPC1<art> 
    WSR.EPC2<art> WSR.EPS2<art> WSR.EXCCAUSE<art> WSR.EXCSAVE1<art> 
    WSR.EXCSAVE2<art> WSR.EXCVADDR<art> WSR.ICOUNT<art> 
    WSR.ICOUNTLEVEL<art> WSR.INTCLEAR<art> WSR.INTENABLE<art> 
    WSR.INTSET<art> WSR.LBEG<art> WSR.LCOUNT<art> WSR.LEND<art> 
    WSR.LITBASE<art> WSR.MEMCTL<art> WSR.PS<art> WSR.SAR<art> 
    WSR.WINDOWBASE<art> WSR.WINDOWSTART<art> WUR.a_i<art> WUR.a_r<art> 
    WUR.av_0<art> WUR.av_1<art> WUR.av_2<art> WUR.av_3<art> WUR.b_i<art> 
    WUR.b_r<art> WUR.bv_0<art> WUR.bv_1<art> WUR.bv_2<art> WUR.bv_3<art> 
    WUR.debug_reg<art> WUR.done<art> WUR.even_const<art> WUR.even_ix<art> 
    WUR.l<art> WUR.lg2_n<art> WUR.m_ix<art> WUR.n<art> WUR.n_2<art> 
    WUR.odd_ix<art> WUR.ptr_data<art> WUR.ptr_w<art> WUR.q_i<art> 
    WUR.q_r<art> WUR.qv_i_0<art> WUR.qv_i_1<art> WUR.qv_r_0<art> 
    WUR.qv_r_1<art> WUR.shift<art> WUR.step<art> WUR.time_decimation<art> 
    WUR.u_i<art> WUR.u_r<art> WUR.v_i<art> WUR.v_r<art> WUR.w_i<art> 
    WUR.w_inc<art> WUR.w_ix<art> WUR.w_r<art> WUR.wv_0<art> WUR.wv_1<art> 
    WUR.wv_2<art> WUR.wv_3<art> XOR<art> XSR.BR<art> XSR.CPENABLE<art> 
    XSR.DDR<art> XSR.DEBUGCAUSE<art> XSR.DEPC<art> XSR.EPC1<art> 
    XSR.EPC2<art> XSR.EPS2<art> XSR.EXCCAUSE<art> XSR.EXCSAVE1<art> 
    XSR.EXCSAVE2<art> XSR.EXCVADDR<art> XSR.ICOUNT<art> 
    XSR.ICOUNTLEVEL<art> XSR.INTENABLE<art> XSR.LBEG<art> XSR.LCOUNT<art> 
    XSR.LEND<art> XSR.LITBASE<art> XSR.MEMCTL<art> XSR.PS<art> XSR.SAR<art> 
    XSR.WINDOWBASE<art> XSR.WINDOWSTART<art> 
  regfile AR: port rd1: slot #0 Inst16a
    ADD.N<art> S32I.N<art> 
  regfile AR: port rd1: slot #0 xt_flix64_slot0
    ABS<art> ADD<art> ADDX2<art> ADDX4<art> ADDX8<art> AND<art> EXTUI<art> 
    MAX<art> MAXU<art> MIN<art> MINU<art> MOVEQZ<art> MOVGEZ<art> 
    MOVLTZ<art> MOVNEZ<art> NEG<art> OR<art> S16I<art> S32I<art> S8I<art> 
    SRA<art> SRAI<art> SRC<art> SRL<art> SRLI<art> SUB<art> SUBX2<art> 
    SUBX4<art> SUBX8<art> XOR<art> 
  regfile AR: port rd1: slot #0 xt_flix64_slot0
    ABS<art> ADD<art> ADDX2<art> ADDX4<art> ADDX8<art> AND<art> EXTUI<art> 
    MAX<art> MAXU<art> MIN<art> MINU<art> MOVEQZ<art> MOVGEZ<art> 
    MOVLTZ<art> MOVNEZ<art> NEG<art> OR<art> S16I<art> S32I<art> S8I<art> 
    SRA<art> SRAI<art> SRC<art> SRL<art> SRLI<art> SUB<art> SUBX2<art> 
    SUBX4<art> SUBX8<art> XOR<art> 
  regfile AR: port rd2: slot #1 xt_flix64_slot1
    ADD<art> ADDX2<art> ADDX4<art> ADDX8<art> AND<art> EXTUI<art> 
    MOVEQZ<art> MOVGEZ<art> MOVLTZ<art> MOVNEZ<art> NEG<art> OR<art> 
    SRA<art> SRAI<art> SRC<art> SRL<art> SRLI<art> SUB<art> XOR<art> 
  regfile AR: port rd2: slot #1 xt_flix64_slot3
    BALL.W18<art> BANY.W18<art> BBC.W18<art> BBS.W18<art> BEQ.W18<art> 
    BGE.W18<art> BGEU.W18<art> BLT.W18<art> BLTU.W18<art> BNALL.W18<art> 
    BNE.W18<art> BNONE.W18<art> 
  regfile AR: port rd3: slot #1 xt_flix64_slot1
    ADD<ars> ADDI<ars> ADDMI<ars> ADDX2<ars> ADDX4<ars> ADDX8<ars> AND<ars> 
    JX<ars> MOV.N<ars> MOVEQZ<ars> MOVGEZ<ars> MOVLTZ<ars> MOVNEZ<ars> 
    OR<ars> SEXT<ars> SLL<ars> SLLI<ars> SRC<ars> SSL<ars> SUB<ars> 
    XOR<ars> 
  regfile AR: port rd3: slot #1 xt_flix64_slot3
    BALL.W18<ars> BANY.W18<ars> BBC.W18<ars> BBCI.W18<ars> BBS.W18<ars> 
    BBSI.W18<ars> BEQ.W18<ars> BEQI.W18<ars> BEQZ.W18<ars> BGE.W18<ars> 
    BGEI.W18<ars> BGEU.W18<ars> BGEUI.W18<ars> BGEZ.W18<ars> BLT.W18<ars> 
    BLTI.W18<ars> BLTU.W18<ars> BLTUI.W18<ars> BLTZ.W18<ars> BNALL.W18<ars> 
    BNE.W18<ars> BNEI.W18<ars> BNEZ.W18<ars> BNONE.W18<ars> 
  regfile AR: port rd4: slot #0 Inst
    FFT_COM_MUL<opnd_FFT_COM_MUL_a_r> 
  regfile AR: port rd4: slot #2 xt_flix64_slot2
    ABS<art> ADD<art> ADDX2<art> ADDX4<art> AND<art> NEG<art> OR<art> 
    SRA<art> SRAI<art> SRL<art> SRLI<art> SUB<art> XOR<art> 
  regfile AR: port rd5: slot #0 Inst
    FFT_COM_MUL<opnd_FFT_COM_MUL_a_i> 
  regfile AR: port rd5: slot #2 xt_flix64_slot2
    ADD<ars> ADDI.N<ars> ADDX2<ars> ADDX4<ars> AND<ars> MOV.N<ars> OR<ars> 
    SEXT<ars> SUB<ars> XOR<ars> 
  regfile AR: port wr0: slot #0 Inst
    ABS<arr> ADD<arr> ADDI<art> ADDMI<art> ADDX2<arr> ADDX4<arr> ADDX8<arr> 
    AND<arr> CALL0<ar0> CALL12<ar12> CALL4<ar4> CALL8<ar8> CALLX0<ar0> 
    CALLX12<ar12> CALLX4<ar4> CALLX8<ar8> CLAMPS<arr> ENTRY<ars> 
    ENTRY<ars_entry> EXTUI<arr> FFT_BIT_REVERSE<opnd_FFT_BIT_REVERSE_n> 
    FFT_COM_MUL<opnd_FFT_COM_MUL_a_r> FFT_UPDATE<opnd_FFT_UPDATE_done_out> 
    L16SI<art> L16UI<art> L32E<art> L32I<art> L32R<art> L8UI<art> 
    LDDR32.P<ars> LICT<art> LICW<art> MAX<arr> MAXU<arr> MIN<arr> MINU<arr> 
    MOVEQZ<arr> MOVF<arr> MOVGEZ<arr> MOVI<art> MOVLTZ<arr> MOVNEZ<arr> 
    MOVSP<art> MOVT<arr> MUL16S<arr> MUL16U<arr> MULL<arr> NEG<arr> 
    NSA<art> NSAU<art> OR<arr> PDTLB<art> PITLB<art> RDTLB0<art> 
    RDTLB1<art> RER<art> RITLB0<art> RITLB1<art> RSIL<art> RSR.BR<art> 
    RSR.CONFIGID0<art> RSR.CONFIGID1<art> RSR.CPENABLE<art> RSR.DDR<art> 
    RSR.DEBUGCAUSE<art> RSR.DEPC<art> RSR.EPC1<art> RSR.EPC2<art> 
    RSR.EPS2<art> RSR.EXCCAUSE<art> RSR.EXCSAVE1<art> RSR.EXCSAVE2<art> 
    RSR.EXCVADDR<art> RSR.ICOUNT<art> RSR.ICOUNTLEVEL<art> 
    RSR.INTENABLE<art> RSR.INTERRUPT<art> RSR.LBEG<art> RSR.LCOUNT<art> 
    RSR.LEND<art> RSR.LITBASE<art> RSR.MEMCTL<art> RSR.PS<art> RSR.SAR<art> 
    RSR.WINDOWBASE<art> RSR.WINDOWSTART<art> RUR.a_i<arr> RUR.a_r<arr> 
    RUR.av_0<arr> RUR.av_1<arr> RUR.av_2<arr> RUR.av_3<arr> RUR.b_i<arr> 
    RUR.b_r<arr> RUR.bv_0<arr> RUR.bv_1<arr> RUR.bv_2<arr> RUR.bv_3<arr> 
    RUR.debug_reg<arr> RUR.done<arr> RUR.even_const<arr> RUR.even_ix<arr> 
    RUR.l<arr> RUR.lg2_n<arr> RUR.m_ix<arr> RUR.n<arr> RUR.n_2<arr> 
    RUR.odd_ix<arr> RUR.ptr_data<arr> RUR.ptr_w<arr> RUR.q_i<arr> 
    RUR.q_r<arr> RUR.qv_i_0<arr> RUR.qv_i_1<arr> RUR.qv_r_0<arr> 
    RUR.qv_r_1<arr> RUR.shift<arr> RUR.step<arr> RUR.time_decimation<arr> 
    RUR.u_i<arr> RUR.u_r<arr> RUR.v_i<arr> RUR.v_r<arr> RUR.w_i<arr> 
    RUR.w_inc<arr> RUR.w_ix<arr> RUR.w_r<arr> RUR.wv_0<arr> RUR.wv_1<arr> 
    RUR.wv_2<arr> RUR.wv_3<arr> SDDR32.P<ars> SEXT<arr> SLL<arr> SLLI<arr> 
    SRA<arr> SRAI<arr> SRC<arr> SRL<arr> SRLI<arr> SUB<arr> SUBX2<arr> 
    SUBX4<arr> SUBX8<arr> XOR<arr> XSR.BR<art> XSR.CPENABLE<art> 
    XSR.DDR<art> XSR.DEBUGCAUSE<art> XSR.DEPC<art> XSR.EPC1<art> 
    XSR.EPC2<art> XSR.EPS2<art> XSR.EXCCAUSE<art> XSR.EXCSAVE1<art> 
    XSR.EXCSAVE2<art> XSR.EXCVADDR<art> XSR.ICOUNT<art> 
    XSR.ICOUNTLEVEL<art> XSR.INTENABLE<art> XSR.LBEG<art> XSR.LCOUNT<art> 
    XSR.LEND<art> XSR.LITBASE<art> XSR.MEMCTL<art> XSR.PS<art> XSR.SAR<art> 
    XSR.WINDOWBASE<art> XSR.WINDOWSTART<art> 
  regfile AR: port wr0: slot #0 Inst16a
    ADD.N<arr> ADDI.N<arr> L32I.N<art> 
  regfile AR: port wr0: slot #0 Inst16b
    MOV.N<art> MOVI.N<ars> 
  regfile AR: port wr0: slot #0 xt_flix64_slot0
    ABS<arr> ADD<arr> ADDI<art> ADDMI<art> ADDX2<arr> ADDX4<arr> ADDX8<arr> 
    AND<arr> CLAMPS<arr> EXTUI<arr> L16SI<art> L16UI<art> L32I<art> 
    L32R<art> L8UI<art> MAX<arr> MAXU<arr> MIN<arr> MINU<arr> MOV.N<art> 
    MOVEQZ<arr> MOVGEZ<arr> MOVI<art> MOVLTZ<arr> MOVNEZ<arr> NEG<arr> 
    NSA<art> NSAU<art> OR<arr> SEXT<arr> SLL<arr> SLLI<arr> SRA<arr> 
    SRAI<arr> SRC<arr> SRL<arr> SRLI<arr> SUB<arr> SUBX2<arr> SUBX4<arr> 
    SUBX8<arr> XOR<arr> 
  regfile AR: port wr0: slot #0 xt_flix64_slot0
    ABS<arr> ADD<arr> ADDI<art> ADDMI<art> ADDX2<arr> ADDX4<arr> ADDX8<arr> 
    AND<arr> CLAMPS<arr> EXTUI<arr> L16SI<art> L16UI<art> L32I<art> 
    L32R<art> L8UI<art> MAX<arr> MAXU<arr> MIN<arr> MINU<arr> MOV.N<art> 
    MOVEQZ<arr> MOVGEZ<arr> MOVI<art> MOVLTZ<arr> MOVNEZ<arr> NEG<arr> 
    NSA<art> NSAU<art> OR<arr> SEXT<arr> SLL<arr> SLLI<arr> SRA<arr> 
    SRAI<arr> SRC<arr> SRL<arr> SRLI<arr> SUB<arr> SUBX2<arr> SUBX4<arr> 
    SUBX8<arr> XOR<arr> 
  regfile AR: port wr1: slot #1 xt_flix64_slot1
    ADD<arr> ADDI<art> ADDMI<art> ADDX2<arr> ADDX4<arr> ADDX8<arr> AND<arr> 
    EXTUI<arr> MOV.N<art> MOVEQZ<arr> MOVGEZ<arr> MOVI<art> MOVLTZ<arr> 
    MOVNEZ<arr> NEG<arr> OR<arr> SEXT<arr> SLL<arr> SLLI<arr> SRA<arr> 
    SRAI<arr> SRC<arr> SRL<arr> SRLI<arr> SUB<arr> XOR<arr> 
  regfile AR: port wr2: slot #0 Inst
    FFT_COM_MUL<opnd_FFT_COM_MUL_a_i> 
  regfile AR: port wr2: slot #2 xt_flix64_slot2
    ABS<arr> ADD<arr> ADDI.N<arr> ADDX2<arr> ADDX4<arr> AND<arr> MOV.N<art> 
    MOVI.N<ars> NEG<arr> OR<arr> SEXT<arr> SRA<arr> SRAI<arr> SRL<arr> 
    SRLI<arr> SUB<arr> XOR<arr> 
regfile BR:
  regfile BR: port rd0: slot #0 Inst
    ALL4<bs4> ALL8<bs8> ANDB<bt> ANDBC<bt> ANY4<bs4> ANY8<bs8> MOVF<bt> 
    MOVT<bt> ORB<bt> ORBC<bt> RSR.BR<brall> XORB<bt> XSR.BR<brall> 
  regfile BR: port rd1: slot #0 Inst
    ANDB<bs> ANDBC<bs> BF<bs> BT<bs> ORB<bs> ORBC<bs> XORB<bs> 
  regfile BR: port wr0: slot #0 Inst
    ALL4<bt> ALL8<bt> ANDB<br> ANDBC<br> ANY4<bt> ANY8<bt> ORB<br> ORBC<br> 
    WSR.BR<brall> XORB<br> XSR.BR<brall> 


### Load/Store unit information
Load/Store unit used in slot 0: 0
Load/Store unit used in slot 1: 1
Load/Store unit used in slot 2:
#The following opcodes in format x24, slot Inst, index 0 use Load/Store unit 0 
    FFT_LOAD_W IDTLB IHI III IITLB IPF L16SI L16UI L32E L32I L32R L8UI 
    LDDR32.P LICT LICW PDTLB PITLB RDTLB0 RDTLB1 RITLB0 RITLB1 S16I S32E 
    S32I S32NB S8I SDDR32.P SICT SICW WDTLB WITLB 
#The following opcodes in format x16a, slot Inst16a, index 0 use Load/Store unit 0 
    L32I.N S32I.N 
#The following opcodes in format xt_format1, slot xt_flix64_slot0, index 0 use Load/Store unit 0 
    L16SI L16UI L32I L32R L8UI S16I S32I S8I 
#The following opcodes in format xt_format2, slot xt_flix64_slot0, index 0 use Load/Store unit 0 
    L16SI L16UI L32I L32R L8UI S16I S32I S8I 
#The following opcodes in format fft_flix, slot fft_slot0, index 0 use Load/Store unit 0 
    FFT_LOAD_EVEN FFT_STORE_EVEN 
#The following opcodes in format fft_flix, slot fft_slot1, index 1 use Load/Store unit 1 
    FFT_LOAD_ODD FFT_STORE_ODD 


### Schedule information for states
State: w_r
  use stages: 1
  def stages: 3
State: w_i
  use stages: 1
  def stages: 3
State: a_r
  use stages: 1
  def stages: 3
State: a_i
  use stages: 1
  def stages: 3
State: b_r
  use stages: 1
  def stages: 3
State: b_i
  use stages: 1
  def stages: 3
State: u_r
  use stages: 1
  def stages: 1
State: u_i
  use stages: 1
  def stages: 1
State: v_r
  use stages: 1
  def stages: 1
State: v_i
  use stages: 1
  def stages: 1
State: q_r
  use stages: 1
  def stages: 1
State: q_i
  use stages: 1
  def stages: 1
State: wv
  use stages: 1 2
  def stages: 2
State: av
  use stages: 1
  def stages: 1 2
State: bv
  use stages: 1
  def stages: 1 2
State: done
  use stages: 1 2
  def stages: 1
State: shift
  use stages: 1
  def stages: 1
State: even_ix
  use stages: 1
  def stages: 1
State: odd_ix
  use stages: 1
  def stages: 1
State: even_const
  use stages: 1
  def stages: 1
State: w_ix
  use stages: 1
  def stages: 1
State: w_inc
  use stages: 1
  def stages: 1
State: m_ix
  use stages: 1
  def stages: 1
State: l
  use stages: 1
  def stages: 1
State: n
  use stages: 1
  def stages: 3
State: n_2
  use stages: 1
  def stages: 1
State: lg2_n
  use stages: 1
  def stages: 3
State: step
  use stages: 1
  def stages: 1
State: ptr_data
  use stages: 1
  def stages: 3
State: ptr_w
  use stages: 1
  def stages: 3
State: debug_reg
  use stages: 1
  def stages: 1
State: time_decimation
  use stages: 1
  def stages: 3
State: qv_r
  use stages: 1 3
  def stages: 3
State: qv_i
  use stages: 1 3
  def stages: 3


### User register write instruction def stages
Instruction WUR.w_r defs user_register w_r in stage 3.
Instruction WUR.w_i defs user_register w_i in stage 3.
Instruction WUR.a_r defs user_register a_r in stage 3.
Instruction WUR.a_i defs user_register a_i in stage 3.
Instruction WUR.b_r defs user_register b_r in stage 3.
Instruction WUR.b_i defs user_register b_i in stage 3.
Instruction WUR.u_r defs user_register u_r in stage 1.
Instruction WUR.u_i defs user_register u_i in stage 1.
Instruction WUR.v_r defs user_register v_r in stage 1.
Instruction WUR.v_i defs user_register v_i in stage 1.
Instruction WUR.q_r defs user_register q_r in stage 1.
Instruction WUR.q_i defs user_register q_i in stage 1.
Instruction WUR.wv_0 defs user_register wv_0 in stage 2.
Instruction WUR.wv_1 defs user_register wv_1 in stage 2.
Instruction WUR.wv_2 defs user_register wv_2 in stage 2.
Instruction WUR.wv_3 defs user_register wv_3 in stage 2.
Instruction WUR.av_0 defs user_register av_0 in stage 1.
Instruction WUR.av_1 defs user_register av_1 in stage 1.
Instruction WUR.av_2 defs user_register av_2 in stage 1.
Instruction WUR.av_3 defs user_register av_3 in stage 1.
Instruction WUR.bv_0 defs user_register bv_0 in stage 1.
Instruction WUR.bv_1 defs user_register bv_1 in stage 1.
Instruction WUR.bv_2 defs user_register bv_2 in stage 1.
Instruction WUR.bv_3 defs user_register bv_3 in stage 1.
Instruction WUR.done defs user_register done in stage 1.
Instruction WUR.shift defs user_register shift in stage 1.
Instruction WUR.even_ix defs user_register even_ix in stage 1.
Instruction WUR.odd_ix defs user_register odd_ix in stage 1.
Instruction WUR.even_const defs user_register even_const in stage 1.
Instruction WUR.w_ix defs user_register w_ix in stage 1.
Instruction WUR.w_inc defs user_register w_inc in stage 1.
Instruction WUR.m_ix defs user_register m_ix in stage 1.
Instruction WUR.l defs user_register l in stage 1.
Instruction WUR.n defs user_register n in stage 3.
Instruction WUR.n_2 defs user_register n_2 in stage 1.
Instruction WUR.lg2_n defs user_register lg2_n in stage 3.
Instruction WUR.step defs user_register step in stage 1.
Instruction WUR.ptr_data defs user_register ptr_data in stage 3.
Instruction WUR.ptr_w defs user_register ptr_w in stage 3.
Instruction WUR.debug_reg defs user_register debug_reg in stage 1.
Instruction WUR.time_decimation defs user_register time_decimation in stage 3.
Instruction WUR.qv_r_0 defs user_register qv_r_0 in stage 3.
Instruction WUR.qv_r_1 defs user_register qv_r_1 in stage 3.
Instruction WUR.qv_i_0 defs user_register qv_i_0 in stage 3.
Instruction WUR.qv_i_1 defs user_register qv_i_1 in stage 3.


### Report the generated flops in each semantic 

Semantic: wv_wur_sem
    1 * 2 	WUR_wv_3: 0 -> 2
    1 * 2 	WUR_wv_2: 0 -> 2
    1 * 2 	WUR_wv_1: 0 -> 2
    1 * 2 	WUR_wv_0: 0 -> 2

Semantic: wv_rur_sem
    1 * 1 	RUR_wv_3: 0 -> 1
    1 * 1 	RUR_wv_2: 0 -> 1
    1 * 1 	RUR_wv_1: 0 -> 1
    1 * 1 	RUR_wv_0: 0 -> 1

Semantic: av_wur_sem
    1 * 1 	WUR_av_3: 0 -> 1
    1 * 1 	WUR_av_2: 0 -> 1
    1 * 1 	WUR_av_1: 0 -> 1
    1 * 1 	WUR_av_0: 0 -> 1

Semantic: av_rur_sem
    1 * 1 	RUR_av_3: 0 -> 1
    1 * 1 	RUR_av_2: 0 -> 1
    1 * 1 	RUR_av_1: 0 -> 1
    1 * 1 	RUR_av_0: 0 -> 1

Semantic: bv_wur_sem
    1 * 1 	WUR_bv_3: 0 -> 1
    1 * 1 	WUR_bv_2: 0 -> 1
    1 * 1 	WUR_bv_1: 0 -> 1
    1 * 1 	WUR_bv_0: 0 -> 1

Semantic: bv_rur_sem
    1 * 1 	RUR_bv_3: 0 -> 1
    1 * 1 	RUR_bv_2: 0 -> 1
    1 * 1 	RUR_bv_1: 0 -> 1
    1 * 1 	RUR_bv_0: 0 -> 1

Semantic: qv_r_wur_sem
    1 * 3 	WUR_qv_r_1: 0 -> 3
    1 * 3 	WUR_qv_r_0: 0 -> 3

Semantic: qv_r_rur_sem
    1 * 1 	RUR_qv_r_1: 0 -> 1
    1 * 1 	RUR_qv_r_0: 0 -> 1

Semantic: qv_i_wur_sem
    1 * 3 	WUR_qv_i_1: 0 -> 3
    1 * 3 	WUR_qv_i_0: 0 -> 3

Semantic: qv_i_rur_sem
    1 * 1 	RUR_qv_i_1: 0 -> 1
    1 * 1 	RUR_qv_i_0: 0 -> 1

Semantic: FFT_LOAD_EVEN
    1 * 1 	shift: 1 -> 2
    1 * 1 	time_decimation: 1 -> 2
    128 * 1 	bv: 1 -> 2

Semantic: FFT_LOAD_ODD
    128 * 1 	av: 1 -> 2

Semantic: FFT_LOAD_W
    1 * 1 	shift: 1 -> 2
    128 * 1 	wv: 1 -> 2

Semantic: FFT_STORE_EVEN
    128 * 1 	bv: 1 -> 2

Semantic: FFT_STORE_ODD
    128 * 1 	av: 1 -> 2
